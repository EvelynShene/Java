在日常开发中，很多时候都需要对一些数据进行排序的操作。然而那些数据一般都是放在一个集合中如：Map ，Set ，List 等集合中。
他们都提共了一个排序方法 sort()，要对数据排序直接使用这个方法就行，但是要保证集合中的对象是“可比较的”。

怎么让一个对象是“可比较的”？

第一种：Comparable 排序接口：若一个类实现了Comparable接口，就意味着“该类支持排序”。 
  假设“有一个List列表(或数组)，里面的元素是实现了Comparable接口的类，重写了compareTo()方法，
  则该List列表(或数组)可以通过 Collections.sort（或 Arrays.sort）进行排序。
  此外，“实现Comparable接口的类的对象”可以用作“有序映射(如TreeMap)”中的键或“有序集合(TreeSet)”中的元素，而不需要指定比较器。
  
  重写的 public int compareTo(Object o){} 这个方法，它返回三种 int 类型的值： 负整数，零 ，正整数。
         返回值	|    含义
         负整数	|  当前对象的值 < 比较对象的值 ， 位置排在前
           零	 |   当前对象的值 = 比较对象的值 ， 位置不变
         正整数	|  当前对象的值 > 比较对象的值 ， 位置排在后
  Example:
       public int compareTo(Student o) {
            //降序
            //return o.age - this.age;
            //升序
            return this.age - o.age;        
        }

第二种：Comparator比较器接口：需要控制某个类的次序，而该类本身不支持排序(即没有实现Comparable接口)
  可以建立一个“比较器”来进行排序。这个“比较器”只需要实现Comparator接口即可。
        Collections.sort(list, new PriceComparator())
      参数一：需要排序的list
      参数二：比较器，实现Comparator接口的类，返回一个int型的值，就相当于一个标志，告诉sort方法按什么顺序来对list进行排序。
  两种写法：
  方法一：
  Collections.sort(list, new Comparator<Student>() {
      @Override
      public int compare(Student o1, Student o2) {
          return o1.getId() - o2.getId();
      }
  });
  方法二：
  list.sort(new Comparator<Student>() {
      @Override
      public int compare(Student o1, Student o2) {
          return o1.getId() - o2.getId();
      }
  });
  
  ----返回值跟 Comparable<> 接口中的 compareTo(Student o) 方法的返回值意思相同。（即同上）
