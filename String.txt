String 类

Example 1: String 类是不可改变的
  String s = "Google";
  System.out.println("s = " + s);
  
  s = "Runoob";
  System.out.println("s = " + s);
实例1中的 s 只是一个 String 对象的引用，并不是对象本身，当执行 s = "Runoob"; 创建了一个新的对象 "Runoob"，而原来的 "Google" 还存在于内存中。


Example 2: 字符串的加算法
  String a = "a";
  String b = "b";
  String c = a + b;
  相当于：
  String c = new StringBuffer().append(a).append(b).toString();
对于字符串的加运算，当编译成 class 文件时，会自动编译为 StringBuffer 来进行字符串的连接操作。

case 1：
  String s1 = "abc";            // 常量池
  String s2 = new String("abc");     // 堆内存中
  System.out.println(s1==s2);        // false两个对象的地址值不一样。
  System.out.println(s1.equals(s2)); // true
case 2：
  String s1="a"+"b"+"c";
  String s2="abc";
  System.out.println(s1==s2); //true
  System.out.println(s1.equals(s2)); //true
  java 中常量优化机制，编译时 s1 已经成为 abc 在常量池中查找创建，s2 不需要再创建。

case 3：
  String s1="ab";
  String s2="abc";
  String s3=s1+"c";
  System.out.println(s3==s2);         // false
  System.out.println(s3.equals(s2));  // true
  先在常量池中创建 ab ，地址指向 s1, 再创建 abc ，指向 s2。
  对于 s3，先创建StringBuilder（或 StringBuffer）对象，通过 append 连接得到 abc ,再调用 toString() 转换得到的地址指向 s3。
  故 (s3==s2) 为 false。
 

总结：
  当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。
  StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。 

1）String：字符串常量，字符串长度不可变。Java中String 是immutable（不可变）的。用于存放字符的数组被声明为final的，因此只能赋值一次，不可再更改。
2）StringBuffer：字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String
类型，可以调用 StringBuffer 的 toString() 方法。Java.lang.StringBuffer 线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但
通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。
3）StringBuilder：字符串变量（非线程安全）。在内部 StringBuilder 对象被当作是一个包含字符序列的变长数组。(有速度优势,常用)

基本原则：
如果要操作少量的数据用 String 
多线程操作大量数据，用StringBuffer
单线程操作大量数据用StringBuilder 
